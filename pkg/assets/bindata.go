// Code generated by go-bindata.
// sources:
// assets/configs/custom/kubelet_monitor.json
// assets/configs/journald/docker_monitor.json
// assets/configs/journald/kernel_monitor.json
// assets/plugins/kubelet-health.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsConfigsCustomKubelet_monitorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x3b\x4f\xc3\x30\x10\xc7\xf7\x7e\x0a\xcb\x33\xa5\x2d\xaf\x21\x2b\x2c\x88\x85\x85\x09\x55\xc8\x75\x8f\xc6\xaa\x7d\x67\xf9\xce\x45\x11\xca\x77\x47\x79\xb4\xb8\x91\xca\xc8\x16\xe5\xff\xf0\xcf\x7f\x7f\xcf\x94\x52\x4a\x47\x9f\x77\x0e\x75\xa5\xb4\xcd\x2c\x14\xf4\x55\xf9\xff\x91\xf0\xd3\xed\x74\xa5\x06\x77\xaf\x38\x3c\xd0\x1e\x3e\x1c\x0a\xa4\x83\xf1\x5d\x74\x75\xb3\xe4\x31\xd8\x5b\xc4\x05\xa0\x2c\x9d\xf4\x70\xae\x58\x42\x9b\x53\x02\xb4\x8d\xae\xd4\xaa\x17\xda\xf1\x48\xa6\x9c\x2c\x74\xa1\x7d\xde\x80\x07\x99\x0f\x48\xf3\x81\x65\x1e\x08\x9d\x50\x3a\x12\x5a\xc2\xad\x13\x47\xc8\xba\x52\xef\x05\xa0\x34\xb1\x6f\x79\x19\x5a\x5e\x13\x6d\x3c\x84\x92\x22\x81\x61\xc2\xc2\xf3\xcc\x6f\xb1\x34\x04\x60\x36\xbb\x92\x45\x39\x56\x39\xea\x01\x78\x3d\x22\xa4\xec\x61\x72\xfa\x19\x81\x40\x88\x94\x4c\x6a\x8a\xee\x4b\x00\x4f\xf4\x85\x53\x5b\x34\x52\x77\xa6\x05\x88\x5d\x60\xdc\x8e\x4b\xf0\xe2\x38\x50\x0d\xc6\x4b\x7d\xcd\xf5\x34\x59\xbc\xc0\xed\x92\xf5\x49\x6c\x7f\x7d\x17\x98\x23\xa4\x60\x10\x50\xa6\x95\xa7\xbd\xff\xdc\xf6\xdf\xaf\x77\x77\x5f\x5e\xaf\xff\x5a\xcf\xda\x9f\x00\x00\x00\xff\xff\xcf\x91\x45\x65\xde\x02\x00\x00")

func assetsConfigsCustomKubelet_monitorJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigsCustomKubelet_monitorJson,
		"assets/configs/custom/kubelet_monitor.json",
	)
}

func assetsConfigsCustomKubelet_monitorJson() (*asset, error) {
	bytes, err := assetsConfigsCustomKubelet_monitorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configs/custom/kubelet_monitor.json", size: 734, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigsJournaldDocker_monitorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xbf\x4e\x33\x31\x10\xc4\xfb\x3c\xc5\xca\xd5\xf7\xf1\x27\x06\x24\x9a\x6b\x03\x05\x1d\x12\x25\x4a\xe1\xdc\xed\x39\x4b\x7c\xde\xd3\xde\x3a\x92\x41\x79\x77\x74\x8e\x83\x4e\x14\xb4\x33\xbf\x99\xb1\xf7\x6b\x05\x00\x60\xc6\x90\x3c\x45\xd3\x80\xf9\xe0\x24\xd1\x85\xce\xdc\x2c\x9d\x0d\xc7\x9e\xbc\x69\xe0\xcc\x17\x67\xe2\x24\x2d\xce\x99\x8e\xdb\x03\x8a\x29\xd6\xa9\xe6\x02\xfb\x57\xa7\xfb\xd9\xb6\x7b\x9e\xd4\x06\xf6\xb6\x96\x9b\x1f\x86\x0f\x3b\xd7\x1e\x66\xe8\x71\xb8\xa8\xbb\xd4\xf7\x28\x6f\xf4\x39\x77\xdf\xdf\x55\xf5\xf7\xda\xed\xc0\x91\x94\xe5\x92\x6a\x39\x76\xa4\xc4\x71\x32\x0d\xbc\x6f\xab\x2a\x29\x60\x11\x16\xef\xd6\x3c\x96\x1e\xc5\x61\x64\x71\x92\x6b\xc5\x39\x80\x6e\xe2\x72\x88\x0d\x8b\xa4\x51\x9f\xca\xda\xcb\xe0\x3c\x2e\xb9\xd1\xa9\xa2\x14\xf0\x59\x84\x05\x54\x32\x45\x0f\xc7\x07\x10\xf4\x34\xa9\xe4\x06\x7a\x47\x01\x3b\x50\xae\x1a\x0a\x04\x97\x51\x1a\x10\x8c\x6e\x40\xb0\x47\x27\x36\xd0\xce\x9e\xff\x64\x69\x9e\xb1\xff\xd6\xd7\xff\xff\xb0\x1a\xe8\x48\xb0\x55\x96\x0c\x91\x15\x70\x18\x35\xaf\xaf\xea\xf9\xb7\xab\xd3\x77\x00\x00\x00\xff\xff\x89\x11\xab\x92\xd4\x01\x00\x00")

func assetsConfigsJournaldDocker_monitorJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigsJournaldDocker_monitorJson,
		"assets/configs/journald/docker_monitor.json",
	)
}

func assetsConfigsJournaldDocker_monitorJson() (*asset, error) {
	bytes, err := assetsConfigsJournaldDocker_monitorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configs/journald/docker_monitor.json", size: 468, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsConfigsJournaldKernel_monitorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x4f\x6f\x13\x3d\x10\xc6\xef\xfd\x14\xa3\x7d\x2f\x2f\xa4\x4d\xc3\x81\xcb\x4a\x1c\x28\x15\x54\xea\x5f\x29\xe4\x54\x57\xc8\xb1\x67\x37\x66\xbd\x33\xab\xb1\xb7\x55\x41\xfd\xee\xc8\x4e\x9a\x86\x55\x15\x95\x2a\x88\x5b\x32\xf3\x3c\xf6\xef\xb1\x67\xfd\x73\x0f\x00\xa0\xe8\x7c\x5f\x3b\x2a\x4a\x28\xbe\x73\x2f\xa4\xbd\x2d\xf6\x37\x3b\x9f\x98\x2a\x57\x17\x25\x2c\xf5\xb9\x13\xb8\x17\x83\xc9\xd3\xa0\x10\xfa\x22\xb7\x1e\x56\x3e\xcf\xf5\x95\x8e\x8b\xd4\x3e\x5c\x70\x88\x87\x9e\xeb\xc3\xd5\xe2\xc5\x5a\xc3\xcd\x5c\x9b\x26\x89\xde\xb7\x8f\xd5\x79\x5f\x55\x28\x53\xf7\x23\xad\xfd\x6e\xb2\xaa\x0e\x77\x3b\x68\x99\x5c\x64\x79\x74\x19\x26\xeb\xa2\x63\x0a\x45\x09\xd7\x1b\x98\xf1\xbe\xcb\xb6\xd3\x6c\x3b\x46\x6d\x3d\x9b\x66\x65\xcb\x0a\x41\x1d\x98\x9e\x34\x27\x3a\x5c\xf0\x73\xc2\x16\x43\xd0\xf5\x06\x04\x2c\x74\x00\x62\xb0\x8f\xe2\xe5\x11\xdc\xac\x98\xa4\xf7\x38\xc0\xf9\x0d\x29\x62\xdb\xb1\x68\xb9\xdf\xd8\x64\x40\x74\x79\x79\x7e\xea\xbc\x77\x54\x0f\x35\x9d\x8e\x11\x65\x89\xed\xbc\x87\x4e\xd8\x60\x08\xa0\x94\x1d\xc1\xff\xe3\xd1\x1b\x08\x86\x05\x97\xff\x59\x20\x68\x23\xae\x72\x06\xc1\x2c\x9c\xb7\x4a\x51\xb2\xa1\x7d\xc6\x18\x39\x6a\x7f\x70\xdb\x96\xa9\xd4\x1c\xed\x83\x26\xa6\x03\x09\x61\x5d\xa8\x9c\xc7\x8d\x42\xb1\x46\x7b\x78\xa2\x7c\x7d\xe8\xaf\x3a\x34\x27\xfd\xd6\xc8\x51\x87\x06\x94\x9a\x8e\x4a\xa5\xee\x46\x30\x4f\xa7\x8f\x16\x2a\x16\x68\x53\xea\xb8\xd0\x04\xb9\x15\x30\x8d\x46\x50\x6a\xbc\x63\xca\x19\x09\xd6\x2e\x44\x94\x0b\x8c\xc7\x78\xeb\x0c\x6e\x01\xee\xd7\xea\x6f\x84\xd1\x66\x79\x09\x77\xda\x45\x47\x75\xe6\xce\xb4\x91\x61\x8e\x86\x5b\x84\x4a\x10\xc7\x30\x4b\x03\x07\x86\x7b\x8a\xf0\x21\x5f\xd1\x8e\x53\x2c\x47\xfe\x92\xbb\xb0\x05\xfe\x68\xf6\xa5\x84\x9e\xf4\xdc\x63\x22\x5c\x68\xb2\x1e\x61\xf5\x0d\x5c\xcc\xce\xce\xa0\x63\x47\x11\x05\x2c\x0a\x56\x28\x48\x06\x41\x47\x18\xbf\xfd\x17\xb8\xd6\xdd\x3a\x8b\x80\x22\x2c\x25\x4c\x26\x93\x09\x28\x75\xfd\x5f\x3a\x3d\xa5\x6e\x60\x7a\x7e\xf5\x27\x54\x1d\x4a\xab\x09\x29\x0e\x77\x5c\x3f\x39\x5b\x9f\x97\x41\x80\x8f\xb3\xcf\xd3\x59\x9b\xee\xf3\x25\x13\xde\x67\xa5\x52\x63\xdd\x57\xe1\x2f\x8d\xfa\x6e\xf3\x1d\x27\x3a\x79\x49\x36\x9b\x95\xaf\x0b\x95\x7f\xdd\xec\x3d\xfc\x0a\x00\x00\xff\xff\x0e\xaf\xf8\xc2\xbf\x06\x00\x00")

func assetsConfigsJournaldKernel_monitorJsonBytes() ([]byte, error) {
	return bindataRead(
		_assetsConfigsJournaldKernel_monitorJson,
		"assets/configs/journald/kernel_monitor.json",
	)
}

func assetsConfigsJournaldKernel_monitorJson() (*asset, error) {
	bytes, err := assetsConfigsJournaldKernel_monitorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/configs/journald/kernel_monitor.json", size: 1727, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPluginsKubeletHealthSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x41\x0e\x82\x30\x10\x46\xe1\xfd\x9c\xe2\xa7\xb2\xd0\x05\xb4\x10\x13\x0d\x86\x93\x20\x8b\xa2\x43\x3a\x91\x00\xa1\x53\x63\x3c\xbd\x91\xd5\x7b\xab\xef\x90\xd9\x14\x37\x3b\xc8\x6c\x79\x7e\x63\xf0\x31\x10\x45\x56\x14\xbc\x24\xac\xb2\xf2\xe8\x65\x22\x7a\x7a\xf5\x6d\x7e\x7c\xa4\x6d\xc2\x9d\x80\x22\xee\x09\xaa\x6b\x63\x6d\x55\x5f\x4a\x57\xba\xb2\x6a\x2a\x57\x9f\xaf\x36\xb0\x9f\x34\x7c\xe9\x44\x24\x23\xba\x0e\x26\xff\x03\x06\x59\x0b\xb3\xbc\x0c\xfa\xfe\x06\x0d\x3c\x13\xc0\x1f\x51\xd4\x8e\x46\x21\xda\xdf\xfd\x02\x00\x00\xff\xff\x42\x04\x71\x3a\x94\x00\x00\x00")

func assetsPluginsKubeletHealthShBytes() ([]byte, error) {
	return bindataRead(
		_assetsPluginsKubeletHealthSh,
		"assets/plugins/kubelet-health.sh",
	)
}

func assetsPluginsKubeletHealthSh() (*asset, error) {
	bytes, err := assetsPluginsKubeletHealthShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/plugins/kubelet-health.sh", size: 148, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/configs/custom/kubelet_monitor.json": assetsConfigsCustomKubelet_monitorJson,
	"assets/configs/journald/docker_monitor.json": assetsConfigsJournaldDocker_monitorJson,
	"assets/configs/journald/kernel_monitor.json": assetsConfigsJournaldKernel_monitorJson,
	"assets/plugins/kubelet-health.sh": assetsPluginsKubeletHealthSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"configs": &bintree{nil, map[string]*bintree{
			"custom": &bintree{nil, map[string]*bintree{
				"kubelet_monitor.json": &bintree{assetsConfigsCustomKubelet_monitorJson, map[string]*bintree{}},
			}},
			"journald": &bintree{nil, map[string]*bintree{
				"docker_monitor.json": &bintree{assetsConfigsJournaldDocker_monitorJson, map[string]*bintree{}},
				"kernel_monitor.json": &bintree{assetsConfigsJournaldKernel_monitorJson, map[string]*bintree{}},
			}},
		}},
		"plugins": &bintree{nil, map[string]*bintree{
			"kubelet-health.sh": &bintree{assetsPluginsKubeletHealthSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

